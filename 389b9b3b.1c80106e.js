(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{120:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return g}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function b(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),o=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):b(b({},n),e)),t},p=function(e){var n=o(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=o(t),d=a,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return t?r.a.createElement(g,b(b({ref:n},l),{},{components:t})):r.a.createElement(g,b({ref:n},l))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var b={};for(var c in n)hasOwnProperty.call(n,c)&&(b[c]=n[c]);b.originalType=e,b.mdxType="string"==typeof e?e:a,s[1]=b;for(var l=2;l<i;l++)s[l]=t[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},82:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return b})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),i=(t(0),t(120)),s=["components"],b={},c={unversionedId:"content/string",id:"content/string",isDocsHomePage:!1,title:"string",description:"Synth's string generator type regroups many different useful functionalities, from the ability to generate sentences",source:"@site/docs/content/string.md",slug:"/content/string",permalink:"/synth/content/string",editUrl:"https://github.com/getsynth/synth/edit/master/docs/docs/content/string.md",version:"current",sidebar:"docsSidebar",previous:{title:"number",permalink:"/synth/content/number"},next:{title:"object",permalink:"/synth/content/object"}},l=[{value:"pattern",id:"pattern",children:[]},{value:"uuid",id:"uuid",children:[]},{value:"format",id:"format",children:[]},{value:"faker",id:"faker",children:[]},{value:"date_time",id:"date_time",children:[]},{value:"serialized",id:"serialized",children:[]},{value:"truncated",id:"truncated",children:[]},{value:"categorical",id:"categorical",children:[]}],o={toc:l};function p(e){var n=e.components,t=Object(r.a)(e,s);return Object(i.b)("wrapper",Object(a.a)({},o,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Synth's ",Object(i.b)("inlineCode",{parentName:"p"},"string")," generator type regroups many different useful functionalities, from the ability to generate sentences\nfrom a regular expression to dates and times, through leveraging ",Object(i.b)("a",{parentName:"p",href:"https://github.com/cksac/fake-rs"},"Faker")," providers to generate valid addresses,\ntelephone numbers, etc."),Object(i.b)("h2",{id:"pattern"},"pattern"),Object(i.b)("p",null,"String values generated by a specified regular expression in the ",Object(i.b)("inlineCode",{parentName:"p"},"pattern")," key."),Object(i.b)("h4",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{        \n  "type": "string",\n  "pattern": "I am a (man|woman) with [2-9] friends"\n}\n')),Object(i.b)("h2",{id:"uuid"},"uuid"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"uuid")," generates hyphenated ",Object(i.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Universally_unique_identifier"},"UUIDs"),"."),Object(i.b)("p",null,"This generator has no parameters."),Object(i.b)("h4",{id:"example-1"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{        \n  "type": "string",\n  "uuid": {}\n}\n')),Object(i.b)("h2",{id:"format"},"format"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"format")," allows to format one or more string values by parsing a parametric\nformat string and processing the specified replacements."),Object(i.b)("h4",{id:"example-2"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "string",\n  "format": {\n    "format": "my name is {name} and my email is {email}",\n    "arguments": {\n      "name": {\n        "type": "string",\n        "faker": {\n          "generator": "username"\n        }\n      },\n      "email": {\n        "type": "string",\n        "faker": {\n          "generator": "safe_email"\n        }\n      }\n    }\n  }\n}\n')),Object(i.b)("h2",{id:"faker"},"faker"),Object(i.b)("p",null,"Synth has an internal fake data generator that will generate fake data for semantic types such as Names, Addresses, etc."),Object(i.b)("h4",{id:"example-3"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "string",\n  "faker": {\n    "generator": "address"\n  }\n}\n')),Object(i.b)("p",null,"Faker offers a variety of different fake data, in different locales and can be leveraged easily from Synth schemas using\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"generator")," key. "),Object(i.b)("h4",{id:"first_name"},"first_name"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "first_name"\n    }\n}\n')),Object(i.b)("h4",{id:"last_name"},"last_name"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "last_name"\n    }\n}\n')),Object(i.b)("h4",{id:"title"},"title"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "title"\n    }\n}\n')),Object(i.b)("h4",{id:"suffix"},"suffix"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "suffix"\n    }\n}\n')),Object(i.b)("h4",{id:"name"},"name"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "name"\n    }\n}\n')),Object(i.b)("h4",{id:"name_with_title"},"name_with_title"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "name_with_title"\n    }\n}\n')),Object(i.b)("h4",{id:"credit_card"},"credit_card"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "credit_card"\n    }\n}\n')),Object(i.b)("h4",{id:"free_email_provider"},"free_email_provider"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "free_email_provider"\n    }\n}\n')),Object(i.b)("h4",{id:"domain_suffix"},"domain_suffix"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "domain_suffix"\n    }\n}\n')),Object(i.b)("h4",{id:"free_email"},"free_email"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "free_email"\n    }\n}\n')),Object(i.b)("h4",{id:"safe_email"},"safe_email"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "safe_email"\n    }\n}\n')),Object(i.b)("h4",{id:"username"},"username"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "username"\n    }\n}\n')),Object(i.b)("h4",{id:"ipv4"},"ipv4"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "ipv4"\n    }\n}\n')),Object(i.b)("h4",{id:"ipv6"},"ipv6"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "ipv6"\n    }\n}\n')),Object(i.b)("h4",{id:"ip"},"ip"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "ip"\n    }\n}\n')),Object(i.b)("h4",{id:"mac_address"},"mac_address"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "mac_address"\n    }\n}\n')),Object(i.b)("h4",{id:"color"},"color"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "color"\n    }\n}\n')),Object(i.b)("h4",{id:"user_agent"},"user_agent"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "user_agent"\n    }\n}\n')),Object(i.b)("h4",{id:"rfc_status_code"},"rfc_status_code"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "rfc_status_code"\n    }\n}\n')),Object(i.b)("h4",{id:"valid_status_code"},"valid_status_code"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "valid_status_code"\n    }\n}\n')),Object(i.b)("h4",{id:"company_suffix"},"company_suffix"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "company_suffix"\n    }\n}\n')),Object(i.b)("h4",{id:"company_name"},"company_name"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "company_name"\n    }\n}\n')),Object(i.b)("h4",{id:"buzzword"},"buzzword"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "buzzword"\n    }\n}\n')),Object(i.b)("h4",{id:"buzzword_muddle"},"buzzword_muddle"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "buzzword_muddle"\n    }\n}\n')),Object(i.b)("h4",{id:"buzzword_tail"},"buzzword_tail"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "buzzword_tail"\n    }\n}\n')),Object(i.b)("h4",{id:"catch_phrase"},"catch_phrase"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "catch_phrase"\n    }\n}\n')),Object(i.b)("h4",{id:"bs_verb"},"bs_verb"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "bs_verb"\n    }\n}\n')),Object(i.b)("h4",{id:"bs_adj"},"bs_adj"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "bs_adj"\n    }\n}\n')),Object(i.b)("h4",{id:"bs_noun"},"bs_noun"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "bs_noun"\n    }\n}\n')),Object(i.b)("h4",{id:"bs"},"bs"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "bs"\n    }\n}\n')),Object(i.b)("h4",{id:"profession"},"profession"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "profession"\n    }\n}\n')),Object(i.b)("h4",{id:"industry"},"industry"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "industry"\n    }\n}\n')),Object(i.b)("h4",{id:"city_prefix"},"city_prefix"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "city_prefix"\n    }\n}\n')),Object(i.b)("h4",{id:"city_suffix"},"city_suffix"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "city_suffix"\n    }\n}\n')),Object(i.b)("h4",{id:"city_name"},"city_name"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "city_name"\n    }\n}\n')),Object(i.b)("h4",{id:"country_name"},"country_name"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "country_name"\n    }\n}\n')),Object(i.b)("h4",{id:"country_code"},"country_code"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "country_code"\n    }\n}\n')),Object(i.b)("h4",{id:"street_suffix"},"street_suffix"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "street_suffix"\n    }\n}\n')),Object(i.b)("h4",{id:"street_name"},"street_name"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "street_name"\n    }\n}\n')),Object(i.b)("h4",{id:"time_zone"},"time_zone"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "time_zone"\n    }\n}\n')),Object(i.b)("h4",{id:"state_name"},"state_name"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "state_name"\n    }\n}\n')),Object(i.b)("h4",{id:"state_abbr"},"state_abbr"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "state_abbr"\n    }\n}\n')),Object(i.b)("h4",{id:"secondary_address_type"},"secondary_address_type"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "secondary_address_type"\n    }\n}\n')),Object(i.b)("h4",{id:"secondary_address"},"secondary_address"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "secondary_address"\n    }\n}\n')),Object(i.b)("h4",{id:"zip_code"},"zip_code"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "zip_code"\n    }\n}\n')),Object(i.b)("h4",{id:"post_code"},"post_code"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "post_code"\n    }\n}\n')),Object(i.b)("h4",{id:"building_number"},"building_number"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "building_number"\n    }\n}\n')),Object(i.b)("h4",{id:"latitude"},"latitude"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "latitude"\n    }\n}\n')),Object(i.b)("h4",{id:"longitude"},"longitude"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "longitude"\n    }\n}\n')),Object(i.b)("h4",{id:"phone_number"},"phone_number"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "phone_number"\n    }\n}\n')),Object(i.b)("h4",{id:"cell_number"},"cell_number"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "cell_number"\n    }\n}\n')),Object(i.b)("h4",{id:"file_path"},"file_path"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "file_path"\n    }\n}\n')),Object(i.b)("h4",{id:"file_name"},"file_name"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "file_name"\n    }\n}\n')),Object(i.b)("h4",{id:"file_extension"},"file_extension"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "file_extension"\n    }\n}\n')),Object(i.b)("h4",{id:"dir_path"},"dir_path"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "dir_path"\n    }\n}\n')),Object(i.b)("h2",{id:"date_time"},"date_time"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"date_time")," is a variant of the ",Object(i.b)("inlineCode",{parentName:"p"},"string")," generator type that generates values from a specified range of ",Object(i.b)("inlineCode",{parentName:"p"},"date_time"),"\nvalues. This lets you, for example, generate valid days of the year for an ",Object(i.b)("inlineCode",{parentName:"p"},"updated_at")," column or a\nvalid ",Object(i.b)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc2822"},"RFC 2822")," timestamp for an email header field, among others."),Object(i.b)("p",null,"You can specify a string as a ",Object(i.b)("inlineCode",{parentName:"p"},"date_time")," by using the ",Object(i.b)("inlineCode",{parentName:"p"},'"date_time": {...}')," key/value pair."),Object(i.b)("h4",{id:"example-4"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "string",\n  "date_time": {\n    "format": "%Y-%m-%d",\n    "subtype": "naive_date",\n    "begin": "2020-01-01",\n    "end": "2025-01-01"\n  }\n}\n')),Object(i.b)("p",null,"Accepted values for the ",Object(i.b)("inlineCode",{parentName:"p"},'"date_time"')," key are objects with the following keys:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"format"'),": a ",Object(i.b)("a",{parentName:"li",href:"https://docs.rs/chrono/0.4.19/chrono/format/strftime/index.html"},"strftime"),"-style parameter specifying\nthe string formatting of the underlying ",Object(i.b)("inlineCode",{parentName:"li"},"date_time"),"\nvalue."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"subtype"'),": one of the following",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"naive_date"'),": when the underlying ",Object(i.b)("inlineCode",{parentName:"li"},"date_time")," value should be a simple ",Object(i.b)("inlineCode",{parentName:"li"},"date")," without timezone specification,"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"naive_time"'),": when the underlying ",Object(i.b)("inlineCode",{parentName:"li"},"date_time")," value should be a simple ",Object(i.b)("inlineCode",{parentName:"li"},"time")," without timezone specification,"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"naive_date_time"'),": when the underlying ",Object(i.b)("inlineCode",{parentName:"li"},"date_time")," value should be a combined ",Object(i.b)("inlineCode",{parentName:"li"},"date")," and ",Object(i.b)("inlineCode",{parentName:"li"},"time")," without timezone\nspecification,"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"date_time"'),": when the underlying ",Object(i.b)("inlineCode",{parentName:"li"},"date_time")," value should be a combined ",Object(i.b)("inlineCode",{parentName:"li"},"date")," and ",Object(i.b)("inlineCode",{parentName:"li"},"time")," ",Object(i.b)("em",{parentName:"li"},"with")," timezone\nspecification."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"begin"')," and ",Object(i.b)("inlineCode",{parentName:"li"},'"end"'),": the lower and upper bounds of the ",Object(i.b)("inlineCode",{parentName:"li"},"date_time")," value to generate. The formatting of these values\nmust adhere to the ",Object(i.b)("inlineCode",{parentName:"li"},"strftime"),"-string specified in the ",Object(i.b)("inlineCode",{parentName:"li"},'"format"')," field.")),Object(i.b)("h4",{id:"example-5"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "string",\n  "date_time": {\n    "format": "%Y-%m-%dT%H:%M:%S",\n    "subtype": "naive_date_time",\n    "begin": "2015-01-01T00:00:00",\n    "end": "2020-01-01T12:00:00"\n  }\n}\n')),Object(i.b)("h2",{id:"serialized"},"serialized"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"serialized")," is a variant of the ",Object(i.b)("inlineCode",{parentName:"p"},"string")," generator type which serializes the output of a child generator into a string."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"serialized")," has 2 fields,"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"serializer"),": The serializer to be used (currently only ",Object(i.b)("inlineCode",{parentName:"li"},"json"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"content"),": The content to be serialized. This can be any valid Synth generator")),Object(i.b)("h4",{id:"example-6"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "serialized": {\n        "serializer": "json",\n        "content": {\n            "type": "object",\n            "username": {\n                "type": "string",\n                "faker": {\n                    "generator": "name"\n                }\n            }\n        }\n    }\n}\n')),Object(i.b)("h2",{id:"truncated"},"truncated"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"truncated")," generator truncates the output of it's inner generator to a fixed length."),Object(i.b)("p",null,"If the output of its inner generator is less than or equal to the length, it is left untouched. "),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"truncated")," has 2 fields,"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"length"),": The number of characters to truncate to."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"content"),": The content to be truncated. This can be any Synth generator that yields a String.")),Object(i.b)("h4",{id:"example-7"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "string",\n  "truncated": {\n    "content": {\n      "type": "string",\n      "pattern": "[a-zA-Z0-9]{0, 255}"\n    },\n    "length": 5\n  }\n}\n')),Object(i.b)("h2",{id:"categorical"},"categorical"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"categorical")," is a variant of the ",Object(i.b)("inlineCode",{parentName:"p"},"string")," generator type that generates values from a finite set of user-defined\nvalues. You can specify a string as a categorical by using the ",Object(i.b)("inlineCode",{parentName:"p"},'"categorical": {...}')," key/value pair."),Object(i.b)("h4",{id:"example-8"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "string",\n  "categorical": {\n    "pawn": 8,\n    "rook": 2,\n    "knight": 2,\n    "bishop": 2,\n    "queen": 1,\n    "king": 1\n  }\n}\n')),Object(i.b)("p",null,"The value of the ",Object(i.b)("inlineCode",{parentName:"p"},'"categorical"')," key must be an object whose:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"keys are the allowed values of the categorical (e.g. ",Object(i.b)("inlineCode",{parentName:"li"},'"pawn"'),", ",Object(i.b)("inlineCode",{parentName:"li"},'"rook"'),", etc.),"),Object(i.b)("li",{parentName:"ul"},"values are non-negative integers defining the relative weight of the corresponding variant (e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"8"),", ",Object(i.b)("inlineCode",{parentName:"li"},"2"),", etc.).")))}p.isMDXComponent=!0}}]);